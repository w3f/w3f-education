"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[1621],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||l;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},21616:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={id:"coupling-pallets",title:"Using other pallets",sidebar_label:"Using other pallets",description:"Learn how coupling other pallets can extend your own pallet's functionality"},i=void 0,o={unversionedId:"Substrate/section5/coupling-pallets",id:"Substrate/section5/coupling-pallets",title:"Using other pallets",description:"Learn how coupling other pallets can extend your own pallet's functionality",source:"@site/docs/Substrate/section5/coupling-balances.md",sourceDirName:"Substrate/section5",slug:"/Substrate/section5/coupling-pallets",permalink:"/docs/Substrate/section5/coupling-pallets",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Substrate/section5/coupling-balances.md",tags:[],version:"current",lastUpdatedBy:"davidsemakula",lastUpdatedAt:1703552998,formattedLastUpdatedAt:"Dec 26, 2023",frontMatter:{id:"coupling-pallets",title:"Using other pallets",sidebar_label:"Using other pallets",description:"Learn how coupling other pallets can extend your own pallet's functionality"},sidebar:"substrate",previous:{title:"Writing unit tests for pallets",permalink:"/docs/Substrate/section5/unit-tests"},next:{title:"FRAME Pallet Tests and Deployment",permalink:"/docs/Substrate/section6/"}},s={},c=[{value:"Softly coupling pallets via <code>Config</code>",id:"softly-coupling-pallets-via-config",level:2},{value:"Calling the <code>Balances</code> and <code>Randomness</code> pallet within <code>register</code>",id:"calling-the-balances-and-randomness-pallet-within-register",level:2},{value:"Type breakdown: <code>BalanceOf&lt;T&gt;</code>",id:"type-breakdown-balanceoft",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We successfully constructed a function that registers a user in the previous section. Within that\nfunction, we used the ",(0,r.kt)("inlineCode",{parentName:"p"},"T: Config")," generic to access two noteworthy traits:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Currency")," - i.e., ",(0,r.kt)("inlineCode",{parentName:"li"},"T::Currency")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Randomness")," - i.e., ",(0,r.kt)("inlineCode",{parentName:"li"},"T::Randomness"))),(0,r.kt)("h2",{id:"softly-coupling-pallets-via-config"},"Softly coupling pallets via ",(0,r.kt)("inlineCode",{parentName:"h2"},"Config")),(0,r.kt)("p",null,"Both of these allowed us to check user balances with ",(0,r.kt)("inlineCode",{parentName:"p"},"Currency")," and a source of randomness with\n",(0,r.kt)("inlineCode",{parentName:"p"},"Randomness"),". Taking a closer look, these are both in our pallet's configuration. The act of\nincluding a pallet's functionality within the configuration is called ",(0,r.kt)("strong",{parentName:"p"},"soft coupling"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Configure the pallet by specifying the parameters and types it depends on.\n#[pallet::config]\npub trait Config: frame_system::Config {\n    /// Using the pallet_balances exposed 'Currency' trait to fetch user balance info\n    type Currency: ReservableCurrency<Self::AccountId> + LockableCurrency<Self::AccountId, Moment = Self::BlockNumber>;\n    /// Randomness!\n    type Randomness: Randomness<Self::Hash, Self::BlockNumber>;\n}\n")),(0,r.kt)("p",null,"Each of these traits interfaces with other pallets. ",(0,r.kt)("inlineCode",{parentName:"p"},"ReservableCurrency")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"LockableCurrency")," are\nboth traits of the ",(0,r.kt)("inlineCode",{parentName:"p"},"pallet_balances")," and give us the ability to do things such as lock balance,\ncheck balance, and whatever other methods the trait exposes."),(0,r.kt)("p",null,"Randomness is a more straightforward example and also accomplishes the same concept. Any pallet that\nimplements the ",(0,r.kt)("inlineCode",{parentName:"p"},"Randomness")," trait can now be used within our pallet's configuration, just as the\n",(0,r.kt)("inlineCode",{parentName:"p"},"ReservableCurrency")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"LockableCurrency")," traits can also be utilized with any pallet that exposes\nthese as interfaces."),(0,r.kt)("h2",{id:"calling-the-balances-and-randomness-pallet-within-register"},"Calling the ",(0,r.kt)("inlineCode",{parentName:"h2"},"Balances")," and ",(0,r.kt)("inlineCode",{parentName:"h2"},"Randomness")," pallet within ",(0,r.kt)("inlineCode",{parentName:"h2"},"register")),(0,r.kt)("p",null,"Because both traits are part of our ",(0,r.kt)("inlineCode",{parentName:"p"},"Config"),", we can access these types using the generic ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),". This\nis possible due to how the Pallet struct ",(0,r.kt)("strong",{parentName:"p"},"must")," take some generic ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," which implements ",(0,r.kt)("inlineCode",{parentName:"p"},"Config")," as\na trait:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// The extrinsics, or dispatchable functions, for this pallet.\n#[pallet::call]\nimpl<T: Config> Pallet<T> { ... }\n")),(0,r.kt)("p",null,"We can now access any type within our configuration, per ",(0,r.kt)("inlineCode",{parentName:"p"},"T: Config"),"."),(0,r.kt)("h3",{id:"type-breakdown-balanceoft"},"Type breakdown: ",(0,r.kt)("inlineCode",{parentName:"h3"},"BalanceOf<T>")),(0,r.kt)("p",null,"At the top of the file, you notice a type alias that uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"Currency")," trait as well:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"type BalanceOf<T> =\n    <<T as Config>::Currency as Currency<<T as frame_system::Config>::AccountId>>::Balance;\n")),(0,r.kt)("p",null,"This type of declaration defines our minimum lockable amount for a user. In short, it correctly\nstates what balance should look like, as per the currency system (in this case, whatever ",(0,r.kt)("inlineCode",{parentName:"p"},"Currency"),"\nis) in place and used in the rest of the chain."))}d.isMDXComponent=!0}}]);