"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[45],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>d});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),p=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(o.Provider,{value:a},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(t),m=r,d=h["".concat(o,".").concat(m)]||h[m]||u[m]||i;return t?n.createElement(d,l(l({ref:a},c),{},{components:t})):n.createElement(d,l({ref:a},c))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s[h]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},62194:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=t(87462),r=(t(67294),t(3905));const i={id:"install-template",title:"Install the Cumulus Parachain Template",sidebar_label:"Install the Cumulus Parachain Template",description:"Install the Cumulus Parachain Template"},l=void 0,s={unversionedId:"Parachain/beginner/section2/install-template",id:"Parachain/beginner/section2/install-template",title:"Install the Cumulus Parachain Template",description:"Install the Cumulus Parachain Template",source:"@site/docs/Parachain/beginner/section2/install-template.md",sourceDirName:"Parachain/beginner/section2",slug:"/Parachain/beginner/section2/install-template",permalink:"/docs/Parachain/beginner/section2/install-template",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Parachain/beginner/section2/install-template.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1697815782,formattedLastUpdatedAt:"Oct 20, 2023",frontMatter:{id:"install-template",title:"Install the Cumulus Parachain Template",sidebar_label:"Install the Cumulus Parachain Template",description:"Install the Cumulus Parachain Template"},sidebar:"parachain",previous:{title:"Install Local Binaries",permalink:"/docs/Parachain/beginner/section2/install-binary"},next:{title:"Running the Relay and Parachain",permalink:"/docs/Parachain/beginner/section2/running-chains"}},o={},p=[{value:"Install the <code>substrate-parachain-template</code>",id:"install-the-substrate-parachain-template",level:2},{value:"Parachain Chain Specification",id:"parachain-chain-specification",level:2},{value:"Parachain Genesis &amp; Runtime State",id:"parachain-genesis--runtime-state",level:2},{value:"Optional: Generating The Runtime Wasm Bundle",id:"optional-generating-the-runtime-wasm-bundle",level:3},{value:"Optional: Generating the Genesis State Bundle",id:"optional-generating-the-genesis-state-bundle",level:3}],c={toc:p},h="wrapper";function u(e){let{components:a,...t}=e;return(0,r.kt)(h,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"With our relay chain ready to be launched, we now need to ensure we have a parachain that meets the\naforementioned requirements."),(0,r.kt)("p",null,"In this page, you will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install and compile the ",(0,r.kt)("inlineCode",{parentName:"li"},"substrate-parachain-template")),(0,r.kt)("li",{parentName:"ul"},"Configure the ParaID & Chain Spec"),(0,r.kt)("li",{parentName:"ul"},"Generate your parachain's runtime and genesis state (Wasm)"),(0,r.kt)("li",{parentName:"ul"},"If you don't wish to customize or go through this process, refer to the\n",(0,r.kt)("inlineCode",{parentName:"li"},"parachain-guide-resources")," repository")),(0,r.kt)("h2",{id:"install-the-substrate-parachain-template"},"Install the ",(0,r.kt)("inlineCode",{parentName:"h2"},"substrate-parachain-template")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"substrate-parachain-template")," is a Cumulus ready node template. If you have taken the previous\n",(0,r.kt)("a",{parentName:"p",href:"/docs/introsubstrate"},"Intro to Substrate course"),", you may have used a similar template. That\ntemplate was a standalone chain - this template contains the requirements that a parachain needs to\nfulfill in order to connect to the relay chain and follow the\n",(0,r.kt)("a",{parentName:"p",href:"https://wiki.polkadot.network/docs/learn-parachains-protocol"},"Parachains Protocol"),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Start by cloning the repository with the ",(0,r.kt)("strong",{parentName:"p"},"same version as the relay chain"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone --depth 1 --branch polkadot-v1.0.0 https://github.com/substrate-developer-hub/substrate-parachain-template.git\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Ensure we're on our own branch, and now build"),(0,r.kt)("admonition",{parentName:"li",title:"\u231b This will take some time",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Depending on your machine, this may take 45-60 minutes.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd substrate-parachain-template\ngit switch -c my-branch-v1.0.0\n# Build\ncargo build --release\n")))),(0,r.kt)("p",null,"Once your parachain is compiled, the process of altering it (if required) and recompiling will be\ntrivial."),(0,r.kt)("admonition",{title:"Create a symlink to easily run your parachain binary.",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For ease of use, consider adding the target executable to your local path or creating a symlink:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace <path> with the path to your cloned substrate-parachain-template repo\n# The last line may need to be replaced!\nln -s <path>/target/release/parachain-template-node /usr/local/bin/parachain-template-node\n# Use directly in path!\n\nparachain-template-node --help\n"))),(0,r.kt)("admonition",{title:"If you don't wish to customize or go through this process, refer to the",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/CrackTheCode016/parachain-guide-resources"},(0,r.kt)("inlineCode",{parentName:"a"},"parachain-guide-resources")),"\nrepository"),(0,r.kt)("p",{parentName:"admonition"},"The repository has everything required to proceed to running your chains.")),(0,r.kt)("h2",{id:"parachain-chain-specification"},"Parachain Chain Specification"),(0,r.kt)("p",null,"Just as the relay chain had a chain spec, the parachain must have one as well. It is generated in\nthe same way:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Firstly, generate the JSON file:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Run from locally compiled repository\n./substrate-parachain-template/target/release/parachain-template-node build-spec > ./parachain/parachain_chain_spec.json\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Once this is built, also build the ",(0,r.kt)("strong",{parentName:"p"},"raw"),", SCALE-encoded file:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Run from locally compiled repository\n./substrate-parachain-template/target/release/parachain-template-node build-spec \\\n--chain ./parachain/parachain_chain_spec.json \\\n--disable-default-bootnode --raw > raw-parachain-chainspec.json\n")),(0,r.kt)("p",{parentName:"li"},"If this succeeded, you will see the following output:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"2023-09-13 13:25:01 Building chain spec\n2023-09-13 13:25:01 assembling new collators for new session 0 at #0\n2023-09-13 13:25:01 assembling new collators for new session 1 at #0\n")))),(0,r.kt)("h2",{id:"parachain-genesis--runtime-state"},"Parachain Genesis & Runtime State"),(0,r.kt)("p",null,"If you recall, the runtime of every Substrate-based chain is compiled down to Web Assembly (Wasm).\nThis enables the runtime to be portable and stored on the relay chain, which is used for the purpose\nof validating state transitions from the parachain's collator."),(0,r.kt)("p",null,"The genesis configuration must also be configured, as the relay chain will require it when\nregistering it in the next section. These both depend on the ",(0,r.kt)("inlineCode",{parentName:"p"},"parachain_chain_spec.json")," which we\npreviously generated."),(0,r.kt)("p",null,"As always, these are already available within the ",(0,r.kt)("inlineCode",{parentName:"p"},"parachain-guide-resources")," repository."),(0,r.kt)("h3",{id:"optional-generating-the-runtime-wasm-bundle"},"Optional: Generating The Runtime Wasm Bundle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./substrate-parachain-template/target/release/parachain-template-node export-genesis-wasm \\\n--chain ./parachain/parachain_chain_spec_raw.json ./parachain/parachain-wasm\n\n# or, with symlink:\nparachain-template-node export-genesis-wasm \\\n--chain ./parachain/parachain_chain_spec_raw.json parachain-wasm\n")),(0,r.kt)("h3",{id:"optional-generating-the-genesis-state-bundle"},"Optional: Generating the Genesis State Bundle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./substrate-parachain-template/target/release/parachain-template-node export-genesis-state \\\n--chain ./parachain/parachain_chain_spec_raw.json ./parachain/parachain-genesis-state\n\n# or, with symlink:\nparachain-template-node export-genesis-state \\\n--chain ./parachain/parachain_chain_spec_raw.json ./parachain/parachain-genesis-state\n")),(0,r.kt)("p",null,"By now, you should have three total files generated and/or available under the ",(0,r.kt)("inlineCode",{parentName:"p"},"parachains/"),"\ndirectory:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parachain Runtime"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"parachain-wasm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Genesis State"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"parachain-genesis-state")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JSON Chain Spec"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"parachain_chain_spec.json")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Raw Chain Spec"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"parachain_chain_spec_raw.json"))),(0,r.kt)("p",null,"With these, we are now able to run our relay chain validators, run our parachain collator, and\nfinally register our parachain."))}u.isMDXComponent=!0}}]);